基于的设备驱动设计与实现专业名称电路与系统申请人钟远琅指导教师苏检德副教授论文答辩委员会蒋委员www.docin.com基于的设备驱动设计与实现研究生钟远琅研究方向导师苏检德副教授嵌入式系统与应用摘要专业电路与系统年级级㈣㈣眦删峨随着科技的进步和人们生活水平不断提高人们越来越离不开移动应用设备手机和平板作为系统的重要载体已经走进了千家万户。作为目前市场份额最大的嵌入式操作系统跟、、、黑莓最大的不同它具有开放、免费、简单等特点。本文选择作为课题研究系统平台。简称既是一个联盟也是一种接技术是目前作为移动应用处理器的最新接口技术。并不是一个单一的接口和协议而是一套接口标准目前已经得到应用实践的是和并且收到了非常好的效果其他协议仍在制定和完善中同时和也在向更高的版本发展。本文从实际应用出发对的系统架构进行了研究同时分别对和进行深入研究并利用系统进行设备驱动程序设计、编译和调试然后通过来控制智能手机的模块和来控制智能手机的模块最后利用智能手机平台对设计结果进行验证。模块与模块的实验证明接口技术在体积、功耗、成本降低的同时抗干扰能力速度稳定性等仍达到了优异的性能是今后移动接口技术的发展方向。本文具体完成了如下研究工作首先对的背景和意义、的发展现状、的发展现状和研究内容进行了阐述对论文结构进行了梳理。其次研究平台的基本架构和的内核特性并对他们进行了分层次的分析研究。第三深入研究中的和的协议规范详细分析研究了各层的互相关系和作用。第四介绍课题所用到的硬件测试平台和开发环境的搭建。第五在系统下编写和调试设备驱动实现对模块的控制并且利用智能手机平台进行了验证以两个数据通道总共根线点亮了×分辨率的液晶屏时钟频率为屏幕刷新率大于达到了优异的性能效果。第六在系统下编写和调试设备驱动实现对模块的www.docin.com控制并且利用智能手机平台进行了验证以两个数据通道总共根线点亮了像素的摄像头时钟频率为录制×分辨率的视频达到达到了优异的性能效果。最后对全文的工作进行总结和后续工作的展望。关键词驱动www.docin.com。’。www.docin.com—www.docin.com目录摘要……………………………………………………………………………………………………………………………………………………。………………………………………………………………………………………………………………………………………目录……………………………………………………………………………………………………………………………………………………、第章引言……………………………………………………………………………………………………研究背景和意义………………………………………………………………………………………发展现状……………………………………………………………………………………发展现状………………………………………………………………………………………研究内容和目标………………………………………………………………………………………论文结构………………………………………………………………………………………………第章系统平台介绍…………………………………………………………………………………系统架构……………………………………………………………………………………第章第章第章应用程序层……………………………………………………………………………………应用程序框架层………………………………………………………………………………库文件和硬件抽象层…………………………………………………………………………内核层……………………………………………………………………………………本章小结………………………………………………………………………………………………概盎……………………………………………………………………………………………………………………………简介……………………………………………………………………………………………………………………………。简介…………………………………………………………………………………………………………………………分层结构……………………………………………………………………………………应用层…………………………………………………………………………………………协议层…………………………………………………………………………………………通道管理层……………………………………………………………………………………物理层…………………………………………………………………………………………显示串行接口…………………………………………………………………………………摄像头串行接口………………………………………………………………………………本章小结………………………………………………………………………………………………硬件平台及开发环境介绍…………………………………………………………………………硬件平台介绍………………………………………………………………………………………电路设计……………………………………………………………………………电路设计…………………………………………………………………………开发环境介绍………………………………………………………………………………………。虚拟机……………………………………………………………………………系统………………………………………………………………………………………………………组件…………………………………………………………………………………………………………………………………………………………………………………………………………………………本章小结……………………………………………………………………………………………。—设备之驱动程序设计与实现………………………………………………………设备驱动简介………………………………………………………………………………设备之驱动程序设计……………………………………………………………。阶段……………………………………………………………………………………………………………………www.docin.com阶段………………………………………………………………………………………………………………。测试结果………………………………………………………………………………………………本章小结……………………………………………………………………………………………第章—设备之驱动程序设计与实现…………………………………………………设备之驱动程序设计…………………………………………………………模块初始化…………………………………………………………………………设备驱动注册………………………………………………………………………。硬件设备探测………………………………………………………………………初始化……………………………………………………………………………。运行结果……………………………………………………………………………………………本章小结……………………………………………………………………………………………第章结束语…………………………………………………………………………………………………总结……………………………………………………………………………………………………………………………………展望…………………………………………………………………………………………………………………………………参考文献…………………………………………………………………………………………………………致谢www.docin.com第章引言研究背景和意义随着科技的进步人们对手机、平板等移动设备的要求越来越高功能越来越丰富移动终端的外设也越来越多随之而来的功耗、接口规范等问题就显得尤为突出因此一个旨在定义并推广用于移动应用处理器接口的开放标准一简称就应运而生了。的出现把手机内部的接口如摄像头、显示屏接口、射频基带接口等标准化从而减少手机设计的复杂程度和增加设计灵活性减少研发周期加快产品上市的时间也能有效的降低研发成本促进移动设备的重复使用和兼容性【】。同时也随着现代微电子技术的发展硅片的体积正在不断的缩小这就意味着未来的会被封装的越来越小输出的引脚数量将会被压缩因此传统的并行接口将逐渐的失去吸引力高速的串行接口会逐渐取代落后的并行接口例如硬盘的已被所取代、并口也被所取代而中的也将逐渐取代传统的和接口并且中的也将逐渐取代现有的摄像头并行接口【】。一方面传统的并行接口功耗较高例如传统的或接一般工作电压都在信号的摆幅为工作电压而的工作电压为低速时电压摆幅为一高速时电压摆幅为、在降低功耗的同时也降低噪声另一方面传统的并行接口由于引脚众多给的带来了很多困难例如传统的或需要根信号线而最少只需根最多只需根就可以最大提供的带宽足以满足×分辨率的液晶屏。屏和屏接口对比如图所示。图屏和屏接口对比www.docin.com现今人们越来越青睐高分辨率、显示效果细腻的和成像清晰、图片分辨率高的。由分辨率竞赛像素竞赛所带来的接口升级换代就显得尤为重要传统的并行总线接口已无法满足嵌入式设备对体积、功耗、成本等方面的要求取而代之势在必行。因此对进行研究有着重要的意义。虽然目前只有少数的智能手机在使用但是可以预见不久的将来将会大量应用于手持移动终端中统一接口规范并且发挥重要的作用。如智能手机、智能家电、数码相机、摄像机、平板电脑、游戏机等。发展现状系统作为一个新兴的系统年诞生时并未引起多少关注【】。然而年谷歌低调收购了和它的开发团队进入了发展的转折点【】。从年发布源码到年发布的直到现在的阵营逐渐发展壮大目前已经坐稳了移动操作系统的第一把交椅。据所做的年第四季度数据统计手机市场占有率达遥遥领先第二名的很明显牢牢的掌握着领先地位【】。与此同时据发布最新统计显示平板在年的销量超过了亿台占据的全球平板市场份额同比年增长】。另外据谷歌发布的年月份的报告显示家族中。的市场占有率最高为而最新的的市场份额则从上月的上升到且呈较快增长趋势【】。由此可见的发展态势非常良好。基于系统开放的特点很多方案公司对进行深度定制也受到了消费者的青睐比如小米公司推出的风靡全国的、华为的、魅族的、锤子公司的等。目前已逐渐向智能手表、智能家电、游戏机、汽车电子等方面发展。发展现状年月由、、和四大公司成立了简称联盟即移动产业处理器接口联盟。年月联盟发表了第一项针对手机摄像头接口指定的规范的第一个应用方案由此诞生。目前该联盟已经吸引了超过家企业加盟并参与到规范的制定。目前诸如苹果、三星、联发科等移动处理器设计的巨头公司在大量推出带的移动处理器他们所提供的参考设计方案也都以为主。如苹果公司的处理器、三星公司的系列处理器、联发科的系列处理器等。设计液晶屏控制的厂商也在相继推广自己液晶屏分辨率小到大到。而设计摄像头传感器的厂商也没停止自己脚步有效像素小到摄像头大到摄像头一应俱全。于此同时测量仪器生产商也纷纷的为他们的示波器新增测试支持功能如安捷伦的系列示波器、泰克的系列示波器。www.docin.com未来的改进方向包括采用更高速的嵌入式时钟的作为物理层、向更高版本发展、完善基带和射频芯片间的接口、定义高速存储接口主要是组织等【】。研究内容和目标本文的工作主要是围绕基于系统的设备驱动进行针对和进行深入的研究。先研究系统的基本架构重点研究驱动层架构然后分析研究和的规范和协议最后在系统上编写和调试和—设备驱动利用基于的智能手机平台验证结果。论文结构全文共分为七章具体内容如下第章引言。本章主要概述了本论文的研究背景和意义和的发展现状以及课题研究的目标和内容在系统中的应用。第章系统平台介绍。本章主要介绍了的系统架构和内核特性。第章概述。本章主要研究了和的协议规范。第章硬件平台及开发环境介绍。本章主要介绍了课题的硬件测试平台以及开发环境的搭建。第章设备之驱动程序设计与实现。本章主要介绍设备驱动同时阐述整个设备驱动的设计过程最后点亮的液晶屏。第章设备之驱动程序设计与实现。本章主要阐述整个设备驱动的设计过程最后点亮的摄像头。第章结束语。总结了本论文的主要工作以及对未来的展望。www.docin.com第章系统平台介绍系统架构如图所示系统可分为四层从上往下依次为应用程序层、应用程序框架层、库文件和硬件抽象层、内核层。。、…‘”÷……ⅢⅧⅥ—Ⅻ”……¨㈨Ⅲ№‘‘‘Ⅶ一’‘…一……】一腿。荆一砩蝴。…’…㈣黼施蔬螽黼嘲蝴荆州蝌鼢喇俐础荆州删脯蜊一硫础糍蝴㈨僦龇蜥捌黼蜥捌蝴獭赫㈣“越磊龇蠹矗磊赢黼黼‘一‘“一。。耋。羔嚣嚣嚣嚣警篓美煮焉。篡等等嚣誓芸妻茹嚣嚣箸茹嚣蠹嚣盎嚣嚣嚣嚣嚣嚣嚣冀等簧耋嚣“㈣÷㈣※“∞“自ⅫⅫⅫⅫ№№№∞∥誊貉瓴。。《女≯图系统架构应用程序层应用程序层主要是跟用户交互的应用程序如常用的拨号应用、短信应用、联系人应用、设置应用、相机应用、电子邮件应用、计算器应用等等。这些应用程序都是由语言编写而且第三方开发人员可以开发或者深度定制相同的应用程序来代替它们比较灵活和个性化不像其他移动操作系统固化在系统内部的系统软件。开发人员一般都是通过调用应用程序框架层的来完成应用程序设计这样可以提高开发效率减少开发周期。开发人员可以利用开源免费且功能强大的集成开发环境高效地进行应用程序开发。裂■剥到到一到www.docin.com。应用程序框架层应用程序框架层是应用程序开发的基石大多数的应用程序都是通过调用这层的来完成。大大的简化了组件的重用降低了入门门槛缩短了开发周期同时也可以通过继承来实现一些个性化的拓展。当然开发人员也可以开发自己的比较灵活多变。这部分也是由语言开发。该层的各个模块都有自己的功能分工明确层次鲜明。是负责管理各个应用程序生命周期的活动管理器是负责管理所有窗口程序的窗口管理器是负责应用程序之间数据存取或者数据分享的内容提供器是负责构建画面投射的视图系统是为应用程序在状态栏中显示提示信息的通知管理器是程序管理的包管理器是管理所有移动设备功能的电话管理器是提供应用程序使用各种非代码资源的资源管理器是提供位置服务的位置管理器是提供服务的服务【】库文件和硬件抽象层从图中可以看出库文件和硬件抽象层还分成了两部分一部分是系统库另一部分是运行时。这一层是由实现。系统库主要可以分为两层层和硬件抽象层层。众所周知方法和函数是不能直接互相调用的方法只能是先调用然后调用反之亦然。同时在中为了内核的安全用户空间是不允许直接调用内核空间函数的因此就需要系统运行库层来支撑向上与层交互向下与内核交互。是本地调用接口它主要功能是将层的库加载到内存虚拟机中然后返回层函数结构体首地址供本地调用接口调用。而是硬件抽象层它的主要功能是利用系统调用接口来访问内核层的驱动程序。运行时包括核心库和虚拟机前者既兼容了大多数语言所需要调用的功能函数又包括了的核心库比如、、等等】。后者是一种基于寄存器的虚拟机虚拟机主要是完成对生命周期的管理、堆栈的管理、线程的管理、安全和异常的管理以及垃圾回收等重要功能【。这些库有的在系统启动时被加载到内存有的则在需要时动态加载。内核层是基于内核开发而成的系统他在继承的基础上进行了修改使适应移动设备【】。继承了内核的诸多优点保留了内核的主题架构它的核心系统服务依赖于内核如安全性、内存管理、进程管理、网络协议栈和设备驱动模型同时按照移动设备的需求在文件系统、内存管理、进程间通信机制和电源管理方面进行了修改添加了相关驱动程序和必要的新功能【】。从图可以看出显示驱动、摄像头驱动、键盘驱动、驱动、驱动、存储器驱动、电www.docin.com源管理驱动都是典型移动终端设备驱动因为不同的硬件设计方案依赖于不同的硬件设备当然也需要对应的设备驱动来支撑。但是很大程度的保留了的基本架构因此的应用性和扩展性更强。层也是通过系统调用接口进入到内核从而调用驱动程序而驱动程序则根据层传进来的参数或命令进行解析然后操作具体的硬件设备。内核层主要由语言实现。本章小结本章主要分析了系统的架构并对系统的各个层次的功能和联系进行分析研究同时也对的内核特性进行了分析研究。www.docin.com第章概述简介是一个旨在确定并推动移动应用处理器接口开放性标准的联盟年月由行业巨头、、、共同成立。的目是把手机内部的接口如摄像头、显示屏接口、射频基带接口等标准化从而减少手机设计的复杂程度增加设计灵活性【】。借助于这些开放性标准联盟可为移动应用处理器的标准硬件和软件界面确立规范在整个行业价值链中鼓励开放性标准的采用从而加速向移动用户推广新服务的进程【】。联盟目前计划专注于微处理器、外围设备和软件界面以完善现有的标准【】。未来发展的构想如图所示。图未来发展构想图联盟下面有不同的工作组分别针对不同的硬件设备定义了一套移动设备内部接口标准比如摄像头串行接口、显示串行接口、射频接口、www.docin.com麦克风喇叭接口等【。统一接口标准所带来的好处就是手机方案公司可以从市场上根据需要灵活选择不同的芯片或模组更改设计方案时无需考虑更多的因素更加方便快捷。不单是一个联盟也是一套接口协议规范它下辖不同的工作组以满足移动终端各个子系统的不同需求不同的工作组负责制定具体的协议和传统接口不同的是只定义了两种物理层或者以后还将逐渐向过渡。目前已经投入市场应用的有工作组的以及工作组的并取得了非常好的效果特别是近几年目前绝大多数的智能手机都在使用而其他工作组的协议仍在制定和完善中。。简介和共享同一个即他们的物理层是一样的。采用对源同步的差分时钟和对差分数据线来进行数据传输【】。图是的物理连接图为高速时钟通道以双边沿采样的方式进行高速数据传输由主机发送至从机。在高速模式时为单向数据通道速度最大为在低功耗模式时为双向数据通道速度最大为主要用于传输命令参数以进一步降压功耗【。为高速单向数据通道每条最大可提供的带宽由主机发送至从机。可能包含低功耗发送器。、低功耗接收器Ⅸ、高速发送器、高速接收器Ⅸ【】。传输的都是差分信号模式时电压摆幅为此时功耗较小模式时电压摆幅为。此时速度较快】。一个通道的结构如图所示。图物理连接图署搴www.docin.com图一个通道的结构分层结构可以划分为四层如图所示分别为应用层、协议层、通道管理层、物理层层与层之间既分工明确又紧密合作。作为主机时信号流向为应用层一协议层一通道管理层一物理层作为从机时则相反。作为时主机是从机是作为时主机是从机是时钟源来自的经倍频得到高速时钟信号。www.docin.com主机端从机端图分层结构图应用层主机的应用层从缓存中读取原始数据然后生成命令参数并把原始数据包装成字节格式之后送到协议层。相反的从机的应用层负责从协议层拿到数据包然后解析命令并提取原始数据数据送到内存中。协议层的信息传送采用数据包的格式有长数据包和短数据包【】。长数据包长度为字节包括数据包头、有效数据、数据包尾。短数据包长度为只有数据包头。发送数据的时候主机的协议层将根据协议进行打包并生成和添加到数据包里面。相反的从机的协议层负责把接收到的数据包根据和对数据包进行纠错并且把有用数据提取出来送到应用层。www.docin.com。通道管理层主机的通道管理层负责把协议层的数据分发到每个通道上发送时的通道分配关系如图所示。需要指出的是每个通道不一定是同时完成传输的。相反的从机的通道管理层负责把物理层送上来的数据组合好【】。上『通道管理层◆通道管理层◆◆◆◆只有时条时图发送时通道分配示意图物理层主机和从机之间是以同步方式进行传输数据的并且是模式即双边缘触发这样可以在时钟频率不变的情况下将数据传输速率提高一倍更加有效的利用带宽资源。主机的物理层将通道管理层分发下来的数据串行地转成差分信号送到数据线上同时产生差分时钟每个数据通道是并行发送的最多为个通道最少为个通道根据带宽需要而定。从机的物理层负责从差分串行比特流当中捕获或即比高时为“”比高时为“”然后组成位数据送到通道管理层。同时还可以从数据包中检出水平同步信号和垂直同步信号【】。高速模式时序如图所示低功耗模式时序如图所示。由图和可以看出模式时需要依靠高速时钟模式是不需要高速时钟只需差分信号线即可此时的时钟由差分线和异或得到。www.docin.com呶》苏雏璐鼢碜蚴∞殄劫劫∞—可扩—目嗍撼鼬币—’——』品———・耋。、卵悯广二、瞄一“嗡研—咖嚣蕾誓囝叫默黼—叫弘一——∥一’聱—一—■辩一卜”“’—’尸刚哪图高速模式时序图显示串行接口简称是用于支持的接口根据显示器件的不同可以分为两种模式模式和模式【。模式的功能类似于传统的接口它要求有显存主机将显示数据通过送到从机的显存中然后从机收到主机的刷新命令后将显存数据刷新到屏幕上这种模式功耗相对较低但的成本也相应的要高一些。模式类似于传统的接口它不需要带显存主机按照设定的刷新率将显示数据通过直接刷新到显示屏上这种模式功耗相对较高当然的成本也相应的低一些。同时模式还支持中格式的数据传输同步脉冲模式、同步事件模式、突发模式。摄像头串行接口是用于支持摄像头的接口目前的应用中只工作在高速模式传输数据的方式类似与的模式但参数和命令还是沿用总线进行传输。可以传输格式、格式和格式的数据但是一般会传输格式或格式的数据然后进过图像信号处理器进行图像还原、图像校正和图像缩放等操作这样可以降低带宽要求和整体成本。本章小结www.docin.com本章介绍了联盟然后研究了显示串行接口和摄像头串行接口的协议规范和他们共享同的模型同时对的应用层、协议层、通道管理层、物理层的结构和相互关系进行了梳理。www.docin.com第章硬件平台及开发环境介绍硬件平台介绍本文使用的硬件测试平台为联发科的智能手机平台。是一个基于架构内核的双核基带芯片制程主频最高为可根据实际负荷关闭一个或动态调频以降低功耗。基带内部集成了、、、等模块和、、、、、、等外设其中包括用于支持的和用于支持的。最大支持分辨率最大支持像素的视频录像。本文所用的开发板已将和引出其中接有分辨率的液晶屏接有像素板载有的内存和的能够流畅运行系统胜任本文的测试需求。图所示为硬件平台的整体设计框架图。电路设计图硬件平台整体设计框架图是用于支持模块的接口带有一组最大支持条。本文只需要条就足够了其中—和—是时钟差分对、—和—是双向数据通道、—和—是高速数据通道。电路原理图如图所示。蓦一耋一www.docin.com—图原理图电路设计是用于支持模块的接口带有两组分别用于支持前后摄像头最大都是支持条。本文只用到了其中的一组其中和是时钟差分对、和是高速数据通道、和是高速数据通道、是的时钟源。电路原理图如图所示。www.docin.com粼凌弋弋—《—《开发环境介绍图原理图同—由于是基于内核进行开发的因此对进行驱动程序开发跟驱动程序开发类似需要安装编译环境典型的方法是在系统下安装虚拟机然后利用虚拟机来运行系统这样既可以发挥系统的优势又能进行设备驱动开发。的驱动程序将在系统下设计而编译则在系统下进行。开发环境搭建流程图如图所示。《》一分《分《分www.docin.com虚拟机安装上系统安装◆服务器安装士。组件安装占安装图开发环境搭建流程图虚拟机本文中使用的虚拟机是公司开发的。具有免费、性能优异、操作简单等特点。可以从官方网址免费下载安装安装过程非常简单双击运行按照默认设置即可。安装好后如图所示垆警誊。张、。。‘一望≥夕麦露圆瓤餐鼬霸蓬≯誉扁勒滔瓣、二二二二二一二二一二二二二二二二二二二二二二二二一二二二二二二二二二二二。二二二二二二二二、二二二二互二二一二二。二二图安装好后的界面移势黔。脚栩删獭一姗冁酗张州的的暑鸷上至疋栏在具现瓤一一一燃麓篡煳柏黝舸虱www.docin.com系统由于官方推荐使用系统因此本文也选择系统进行开发版本号为以减少开发过程中出现的不必要的麻烦。是一个免费的桌面型操作系统使用方法跟类似因此可以很快的熟悉开发环境。系统镜像可以免费从官方网站下载。安装好后还需在系统中安装一个增强功能插件以方便和之间进行数据交互还需安装服务器以方便将的文件系统映射到下这样就可以用常用的工具进行软件编程了比如就是一款下非常强大友好的代码编辑和查看工具能大大的提高开发效率。选择中的新建按钮然后根据提示导入系统镜像即可安装。安装好后设置的地址使和处于同一个网关内。安装好后如图所示。——————塑立翌燮壁望壁塑竺…。—图安装好后的安装增强功能的方法为设备菜单一选安装增强功能。安装服务器方法为以www.docin.com权限打开然后输入命令印。安装成功后对进行配置步骤如下、编辑配置文件命令行输入编辑件如下。】撑设置可见的名字提示信息撑需要共享路径、建立连接关系命令行输入打开文件然后输入”、设置的用户命令行输入、重启服务命令行输入、打开的命令行通的地址、连接网络驱动器打开我的电脑一选工具菜单一选映射网络驱动器然后输入回车后输入用户名和密码。图为连接网络驱动器效果。www.docin.com纂瀚鬻哮镧溺麟戮湖翳鬃熏鬻鬻瀚溺辫粼溺㈥瀚瀚瀚熬攀潮巨■爵万面而晒丽函丽丽遥绠妻缦。收藏爰。蠕库赫建文绺嶷一一……………名黪攀谴算机鬣本地磁盘埘廖可移习蹙盘可移习舅麓盘蟛。组件蠢孙耘。畦图连接网络驱动器效果组件用来把源码编译成可下载到开发板运行的包安装方法如图所示。图组件安装方法一www.docin.com是一款在下运行代码编辑和浏览器。它小巧却功能强大特别是解析代码关系的能力能高效的帮助程序员查找数据结构、函数调用关系等大大提高开发效率。支持、、拌、、、等众多常见计算机语言。图是的界面。。歹一…五面磊乏磊丽二磊丽瑟磊忑磊———————————■玎窿日圈口母●・◆札◆●鲁警∞峰笠专‘每・●●々国—∞…图—灞—口・“国—萎糍基艄黼黼警—潮・“・●游肌郎嘲嚣・游“撇日一港・游“职邝游吐“●叠联盯。潮凸≯翻蕾潮凸一一”口¨一・翁叫—・尊盯慝田暖・掌一圃日豳露。田口’—蛹‘‘『。。—‘如州。’弛糠一“——聪回圈圈‘———一—一一—一—一—卯嘲Ⅱ州一“晡一吡‘“Ⅱ。—、】∞一。∞’一口驱一一一∞Ⅱ—Ⅸ‘∞。∞“。铷“一湖胛・一Ⅸ一・—囤田暖‘四些翌望竺皇兰兰二一二二二一二二一二…垡本章小结图界面本章主要介绍了硬件测试平台以及开发环境的搭建包括为提供运行环境的虚拟机、编译环境系统、网络驱动器映射工具服务器、为编译提供环境的组件和代码编写查看软件。图囝◆●缓泌鬯∥魄曩砖杖∞瞻唑一陀瞄管芸嘲㈣蹦哪憾勰娜跚霎軎瞄嘲妻言煳眦蜘眦㈣詈㈣绷啾啦www.docin.com第章设备之驱动程序设计与实现设备驱动简介由于是基于内核开发的嵌入式操作系统因此设备驱动跟设备驱动几乎一致也可分为字符设备驱动、块设备驱动和网络设备驱动。同样的设备驱动程序也可以按两种方式编译一种是直接编译进内核随系统启动时加载一种是编译成模块在需要时进行动态加载。设备驱动作为的重要组成部分扮演着至关重要的角色没有设备驱动只是一个空壳毫无实际意义。对于不同的硬件设备来说它的驱动程序是不同的。比如液晶屏、摄像头、电源管理、触摸屏存储设备、传感器等挂载的硬件设备越多所需的设备驱动就越多。对于同一种设备而言由于具体硬件方面的差异设备驱动也不尽相同通过主设备号和次设备号来进行区分。其中主设备号用来区分不同的设备类型如设备、设备次设备号则用来区分同种设备类型的不同硬件设备驱动如设备中的、。由此可见设备驱动的设计、移植、维护是一项很重要的工作否则将无法支配日新月异的硬件设备行为的发展也就无从谈起了。图简单描述了系统和设备驱动的关系。在系统中一般由硬件抽象层层程序通过系统调用接口调用设备驱动程序。图系统和设备驱动关系虽然设备驱动各异但是和相同也对字符设备抽象成一个文件给字符设备驱动提供了统一的访问接口向上跟应用程序交互向下跟硬件设备交互充当着桥梁的角色同时也起到保护内核的作用用户空间的层程序是不允许直接访问内’www.docin.com核空间的驱动程序的。该接口用结构体描述。结构体主要函数指针及函数指针功能说明如下函数打开设备在应用层调用此函数过程中创建设备节点为读写设备做准备木幸水函数重定位读写指针仃木木木函数输入输出控制包括数据和命令等执行和函数无法操作的动作木木函数向硬件设备读取数据—木—木木函数往硬件设备写入数据木—木半—宰木函数关闭设备文件幸水木木函数将内核空间地址映射到用户空间木木木——木用户空间通过系统调用接口来调用这些函数。而这些函数则对用户空间传进来的命令或参数进行解析然后操作具体的硬件设备或者向硬件设备读取数据然后向用户空间传送读写方式与常规的文件读写类似。当应用程序调用系统调用接口时如会得到函数的系统调用号并产生一个软件中断进入内核空间然后会根据这个系统调用号找到异常向量表中的系统调用接口函数并执行而系统调用接口函数会根据主次设备号来创建对应结构体然后执行一这样就找到了内核中相对应的函数。设备之驱动程序设计是驱动液晶屏的接口属于字符设备通过进行抽象和封装本文采取了直接编译进内核的编译方式。由于移动应用终端设备的特殊性即在引导的过程中需要显示因此驱动需要完成两部分的设计工作阶段和阶段。是的缩写是中引入的类似于常见的www.docin.com它是一个微型的操作系统主要用来引导。阶段阶段需要完成的设计工作是根据不同液晶屏模组简称的时序要求初始化控制器分配内存空间作为帧缓冲显示阶段的。图是驱动在阶段的流程图。图驱动在阶段流程图、初始化相关结构体由于很多的时序分辨率初始化序列等差别因此有必要将这块独立出来以增强程序的可读性和可移植性提高开发效率。对于更换同样接口而型号不同的只需修改对应的参数即可由此可见驱动程序分层思想的优越性。部分主要由个结构体进行封装。、封装名称和底层调用接口函数指针定义如下—一虮”一一叭”∥驱动名字——初始化多用途函数结构体包括在低功www.docin.com耗模式的读写函数控制函数和延时函数获取控制器初始化参数初始化挂起恢复帆结构体的指针在——结构体指针数组中被声明。控制器层的驱动通过——结构体的指针获取到封装的信息然后初始化控制器和。这些函数都将在控制器层的驱动中被分别调用。、封装命令参数和初始化参数定义如下命令命令所带的参数个数命令所带的参数列表通过一个结构体数组就可以把所有的初始化参数封装起来然后在函数中利用写命令的函数将参数写入中。在挂起和恢复时也需要写入命令这些命令也可以用这个结构体进行封装。例如在挂起时进入睡眠状态的命令为。、封装控制器的初始化参数定义如下显示屏宽度像素显示屏高度像素——控制器初始化参数结构体通过木函数来获取在中配置了屏幕的宽高、传输模式、数据通道数、的传输格式、的传输时序、的传输频率等信息。定义如下屏幕宽一屏幕高一配置为模式www.docin.com两数据通道传输木配置数据格式木—一。一木木配置传输时序—一一一一木配置时钟频率木木一一、获取大小和物理地址在引导过程中需要完成一些硬件设备的初始化为的运行创造环境其中就需要获取的大小和物理地址、初始化。大小由全局变量表示通过函数返回值得到。为了计算出的大小和物理地址首先得初始化相关的结构体。因为的大小跟的分辨率有关的物理地址跟控制器有关因此需要获取初始化参数结构体和驱动结构体从而得到的分辨率和操作控制器的接口函数。代码如下www.docin.com函数调用层次关系如图所示—上’—初始化相关结构体计算大小将大小对齐到Ⅷ图数调用层次关系在初始化控制器的初始化参数结构体、底层驱动接口函数结构体—、驱动结构体。这些结构体成员将在控制器初始化中被调用。数层次调用关系如图所示。www.docin.com———————————……图数层次调用关系物理地址则由全局变量表示通过物理内存大小—、大小和物理内存地址计算得到。的物理地址安排在物理内存的高地址处代码如下一手—【其中黟通过初始化后得到固定为寻址空间为本文的为。、初始化控制器在第步中得到的物理地址的同时也初始化了相关的结构体这样一来就可以利用这些参数来初始化。因为是以的方式传输数据的否则将大大消耗资源所以需要绑定传输物理地址。在设计过程中将缓存分割为了两个图层一个是控制台显示图层用来显示字符一个是显示图层用来显示阶段的。初始化之后还初始化了两个图层。关键代码如下幸www.docin.com—书木计算一帧需要的缓存大小——∥计算控制台缓存地址木宰计算的的原始数据缓存初始化控制器将缓存全部清零木配置用于控制台显示的图层奉使能图层置图层缓存地址—Ⅵ设置图层的像素格式水设置设置原点偏移量设置图层大小木配置用于阶段显示的图层木一一—√虹水其中的最关键是初始化在函数中利用前面已经初始化的结构体和驱动接口函数结构体指针对进行了初始化然后初始化、跳转到高速传输模式、设置工作模式。初始化是在低功耗模式下进行图像数据传输则在高速模式下进行。初始化之后将由硬件完成相关的时序。的层次调用关系如图所示。www.docin.com『上坠———一图的层次调用关系其中在函数中需要实现初始化时钟、使能、设置收发流控制、初始化物理层传输时序、配置模式传输时序等内容。函数关键代码如下——初始化时钟设置收发流控制——切换至传输模式—初始化物理层传输时序——一一枣——初始化模式传输时序在函数中调用的函数都是对控制器的寄存器进行设置的。其他主要函数及其功能如表所示。www.docin.com表其他主要函数及其功能函数名函数功能等待寄存器更新——刷新屏幕—启动传输使能时钟关闭时钟写命令读寄存器等待非忙状态改变的输出时钟频率、备份的寄存器一一一一还原的寄存器、显不阶段在显示之前首先进行清黑屏以防止出现花屏现象因为黑色的值是所以清黑屏实际上就是将缓存清零然后启动传输将缓存的数据送至。缓存清零由函数完成启动传输则由—完成。的数据则由专门的函数将数据从中读出并解压到图层的缓存中然后启动传输最终会调用到函数完成屏幕的刷新。阶段在阶段驱动需要完成的工作是注册平台驱动检查控制器是否己初始化如果未初始化则对控制器进行初始化备份寄存器初始化—结构体主要包括——结构体、——结构体和结构体最后注册—结构体。图是驱动在阶段的流程图。www.docin.com图驱动在阶段流程图在系统中标准的显示设备驱动是通常将作为其控制器或者其他显示设备的驱动。驱动程序也属于字符设备驱动程序该设备节点一般位于或主设备号为次设备号为且是从依次递增【】。但是由于设备的特殊性不能像其他字符设备一样进行常规的流程。因为是一个读写操作非常频繁的设备如果走常规的流程将增大系统开销大大降低效率和屏幕的刷新率。所以需要像显卡一样把抽象出一个来然后将的内核地址空间映射到用户空间的地址空间这样一来用户空间只要对进行操作就可以将结果直接反应到上了。这些工作都是有设备驱动来完成的。使用了分层结构的思想对进行管理所有设备在中被定义对上为用户空间提供统一的系统调用对下为设备提供了统一的接口避免重复工作。当用户空间调用设备驱动时通过次设备号来区分那一个。系统为了统一接口规范已经在中为用户搭好了框架用户只需在中根据需要实现框架的内容。在本文中需要自己编写。图为设备驱动程序结构图。www.docin.com用户空间层库、山‘Ⅸ内核空间硬件控制器图设备驱动程序结构图由图可知的主要工作是注册设备驱动初始化结构体结构体主要成员如下————牛屏幕可变参数结构体木——木屏幕不可变参数结构体木枣木系统调用接口函数指针结构体幸—是中最重要的结构体每一个的属性都可以从中体现出来在—中主要定义了个重要的结构体、和一个结构体指针。定义了的一些可变的属性如横向和纵向的可视像素点数、横向和纵向偏移量、颜色深度、旋转方向角度等等这些属性可以在应用程序运行期间被动态的改变。舨则定义了的一些固定的属性如缓存的起始地址、缓存长度等这些属性在初始化完之后就不可以改变。则定义了操作设备文件的接口和类似同时多了一些函数指针如、、、等等这些接口可以被层的系统调用接口调用。这些结构体都在头文件中被声明。www.docin.com驱动程序的入口在于的函数这个函数被宏进行定义所有被定义的并且以编译进内核方式的函数都被指定在段中该段中的函数会在启动时被依次调用。在中以平台驱动的方式注册了设备驱动结构体。注册成功之后系统会调用函数函数则完成结构体的初始化和注册、寄存器初始化和备份、设备节点的创建等操作。函数调用层次关系如图所示。山水上—图函数调用关系图在函数中通过解析从传上来的命令行参数来确定是否已经初始化。之后需要备份寄存器因为移动应用终端设备需要进行休眠以便降低系统功耗在被挂起时寄存器有可能会被复位因此需要备份已经初始化了的寄存器当被唤醒时直接把用备份数据来还原控制器就行了不用再次初始化。在函数中注册了结构体一注册之后中的结构体就可以通过调用来找到中的接口函数从而打通跟驱动的联系。进入之后屏幕的刷新流程都将由层进行调度的。测试结果本文所用的是一个分辨率为、模式的液晶屏通道数为。液晶屏的显示位深是理论计算一帧需要数据需要数据约。本文所用的测试仪器为泰克数字示波器带宽为采样频率为。经测试本章的设计结果能满足刷新率大于的要求。的www.docin.com差分时钟波形如图所示其中黄色为差分信号蓝色为差分一信号相位相差度。传输波形如图所示从图中可以看出时钟频率为由于在高速模式时采用方式传输因此实际的数据传输速度为远大于的数据需求能够满足日常使用和大型游戏对屏幕刷新率的要求。图的差分时钟波形图的传输波形www.docin.com利用进行测试的结果如表所示。显示效果如图所示。表测试结果测试序号刷新率邱邱邱邱邱邱邱邱印邱图液晶屏显示效果在功耗方面由于传统的液晶屏并口工作电压是而的工作电压www.docin.com是由可知随着电压的降低负载不变的情况下功耗会进一步的降低。本章小结本章主要介绍了设备驱动同时阐述了整个设备驱动的设计过程根据和阶段的流程图设计驱动、驱动和驱动。同时对设计结果进行了验证。模块实验证明接口技术在体积、功耗、成本降低的同时抗干扰能力强只使用根信号线实际的数据传输速度可达刷新率大于帧达到了优异的性能。www.docin.com第章设备之驱动程序设计与实现设备之驱动程序设计是接收图像数据的接口它和有所不同不需要在阶段工作因此只需做层驱动另外也不需要经常处于工作状态而是被应用程序触发才工作因此只需要完成探测硬件设备和设备驱动注册工作。但也是属于字符设备本文选择直接编译进内核的方式对进行编译。同样的控制器也需要获得具体的初始化参数来对它进行初始化因此首先需要为准备好初始化参数和调用接口也就是注册设备驱动【。设备驱动流程图如图所示。模块初始化图设备驱动流程图www.docin.com模块初始化仍然使用进行加载如下所示必设备驱动注册由于需要总线传输命令和参数因此需要在—函数中注册设备同时也要注册平台驱动。关键代码如下所示—设备设备被挂接在总线上当设备注册成功之后系统会调用结构体中的函数来添加驱动。如下所示————是驱动函数指针的结构体。驱动注册成功之后系统会调用——结构体中的——函数。在函数中注册字符设备驱动创建设备节点为用户空间创建调用接口。定以如下在中引入了硬件抽象层层这层属于用户空间通过系统调用接口找到函数该函数对层传入的参数进行解析然后决定具体的操作。硬件设备探测探测硬件设备的流程图如图所示。www.docin.com图探测硬件设备流程图打开。当层探测硬件设备时首先需要打开由于—是在端属于从机在端属于主机而的高速时钟只能由主机发出出于空间和成本的考虑一般不会在模组内部集成时钟源因此时钟源由提供经内部锁相环得到的高速时钟。通过函数探测硬件设备。硬件设备探测仅发生在内核启动过程由于手机平板一般都会有前后摄像头因此需要层对—函数进行调度。层根据应用层的需求来决定获取那个设备的参数对那个进行初始化。所以在函数中需要实现这些动作的接。函数将层传下来的命令进行解析然后根据命令执行相应的动作用一个语句进行区分。关键代码如下砌—木www.docin.comⅪ二Ⅺ瓜对—二凡—木Ⅺ——回””一每一个设备的初始化参数都不一样但可以把这些设备通过一个结构体进行封装只对外留出打开、关闭、获取信息、功能控制、www.docin.com获取分辨率、动作等接口函数。定义如下————结构体指针通过Ⅵ『数导出定义如下——奉母当将①Ⅺ命令传下来时函数被执行从而获取到全局结构体指针。此时硬件抽象层再次将另外一个命令①Ⅺ传到内核中来然后内核进行解析后执行函数完成硬件设备的探测。在数函数中首先给上电由于摄像头是需要应用层触发运行的设备因此为了降低系统功耗在需要打开摄像头时才对它上电。然后读取摄像头并与预设值进行比较。探测完毕之后关闭硬件设备电源以降低系统功耗因为暂时已经不需要摄像头继续工作。关闭。同样为了降低系统功耗。初始化的初始化流程图如图所示。www.docin.com开始获取板级驱动接口函数结构体指针上给硬件设备上电’读取工初始化参数初始化工关闭硬件设备电源关闭上返回、图初始化流程图的初始化并不像那样在和启动是进行而是当应用程序启动时进行。由于的初始化参数来自于板级驱动函数结构体因此初始化的过程和探测硬件设备阶段类似先是获取板级驱动函数结构体指针然后获取初始化信息最后初始化。当层将刚命令传下来时函数被执行得到初始化参数结构体指针然后地层再把Ⅺ——命令传下来函数被执行函数利用这个结构体指针对的寄存器进行初始化。—被初始化之后会将接收到数据直接送到图像信号处理器进行进一步的处理然后显示到屏幕上。运行结果本文测试所用的摄像头传感器为三星推出的最大支持物理像素视频录像数据通道格式输出。测试仪器为泰克数字示波器带宽为采样频率为。格式的数据已经过压缩因此平均每个像素点只需数据。理论上一帧×的图像需要数据www.docin.com数据通道可以支持像素视频录像。但是由于硬件缺陷和数据传输过程的损耗没有达到的带宽实测带宽为但仍能满足设计极限要求。图是。的差分时钟波形图其中黄色为差分信号蓝色为差分一信号相位相差度。图。是的传输波形图。图的差分时钟波形图图的传输波形图www.docin.com由于应用程序的限制最大只能录制×分辨率的视频。经测试录制×的视频能够达到如图所示。摄像头拍摄时显示效果如图所示。图录制视频属性图www.docin.com图摄像头拍摄时显示效果在功耗方面由于传统的摄像头并口工作电压是而的工作电压是由可知随着电压的降低负载不变的情况下功耗会进一步的降低。本章小结本章主要阐述了整个设备驱动的设计过程包括模块初始化、设备驱动注册、硬件设备探测、初始化并在应用层运行测试。模块实测结果证明只使用根信号线数据传输速率为录制分辨率视频能达到帧。模块的实验表明接口技术在体积、功耗、成本降低的同时抗干扰能力速度稳定性等仍达到了优异的性能。www.docin.com第章结束语总结还是一个新的技术但随着的优势不断扩大在不久的将来会被大量的应用而且其他工作组的接口规范也会不断的得到应用继续向前发展的前景光明。本文在分析研究了大量国内外有关的文献资料以及设备驱动相关理论知识的情况下完成了课题。具体完成的工作如下查阅国内外有关和的文献资料分析的背景和意义、的发展现状、的发展现状。研究平台的基本架构和的内核特性重点研究了内核特性。深入研究中的和的协议规范详细分析研究了各层的互相关系和作用。介绍课题所用到的硬件测试平台和开发环境的搭建。利用系统编写和调试设备驱动实现对模块的控制并且利用平台进行了验证。利用系统编写和调试设备驱动实现对模块的控制并且利用平台进行了验证。模块与模块的实验表明技术在体积、功耗、成本降低的同时抗干扰能力速度稳定性等仍达到了优异的性能是今后移动接口技术的发展方向。展望虽然本文完成了基于的驱动设计点亮了液晶屏和摄像头但是由于时间和硬件资源的限制本文还有两个不足之处本文只研究了接单个的情况没有做多个进行兼容。由于大多数都会提供一个只要不一样就可以通过的读取的进行判断然后根据获取对应的初始化参数来初始化的结构体从而实现兼容。本文只研究了接单个的情况没有做多个进行兼容。由于每个模组一般都会有不同的因此可以通过总线来读取再根据对应的初始化参数来初始化相关结构体和从而实现兼容。但是由于硬件缺陷和数据传输过程的损耗没有达到的带宽仍有提升空间。www.docin.com参考文献【李凯简介及信号和协议测试方法【】国外电子测量技术将彻底改变移动产品设计方式集成电路应用百度百科【中关村在线年安卓设备全球份额达—福布斯中文网全球平板销量亿安卓首超苹果系统最新分布占第【百度百科、ⅣⅪ—李凯谈谈一】王路情系统架构】曾健平邵艳洁系统架构及应用程序开发研究【】微计算机信息王茜嵌入式系统架构及内核浅析】电脑开发与应用—】胡伟系统架构及其驱动研究】广州广播电视大学学报】陈璨陈平花李文亮内核分析【现代计算机专业版—】陈强底层接口与驱动开发技术详解【北京中国铁道出版社・【】—】——【———————www.docin.com【——一温浪明基于—协议的驱动接口设计【广州华南理工大学苏晓峰基于规范的驱动接口设计【广州华南理工大学沈磊高速数据接口的研究与实现长沙湖南大学—】移动互连网设备的显示标准【】今日电子卓爱侠王会燃在便携式移动设备中的研究】洛阳理工学院学报自然科学版【】黄孝衡利用设计移动设备数字影像和显示系统【集成电路应用【晶门科技有限公司晶门科技为显示器市场引入全球首个行动产业处理器接口完全解决方案【】中国集成电路聂和平基于的嵌入式系统移植与驱动开发】南京南京邮电大学】沈晔基于的—内核移植及驱动程序开发哈尔滨哈尔滨工业大学】曹颖鹏基于嵌入式驱动程序的研究与设计【】西安西安电子科技大学孟华黄宗轩系统非标准设备驱动程序设计【】微型机与应用陈文震卞卫锋张亚伟系统下驱动移植仪表技术慕银锁系统研究与移植成都电子科技大学—秦双华基于的系统移植实现【】成都电子科技大学—【苏哲欣刘鸿飞薛晓基于嵌入式的驱动分析与实现】工业控制计算机—陈博基于的操作系统移植【上海华东师范大学韦东山嵌入式应用开发完全手册北京人民邮电出版社叶炳发操作系统移植及关键技术研究广州暨南大学红保系统下子系统的设计、实现与优化】北京北京邮电大学www.docin.com【长生基于平台的设计与实现】济南山东大学朱国斌基于系统的模块设计和实现【】西安西安电子科技大学韦德琼基于系统的驱动模块的设计和实现【】哈尔滨哈尔滨工业大学韩超梁泉系统级深入开发移植与调试【北京电子工业出版社李宁深度探索第卷与驱动开发北京人民邮电出版社】】】www.docin.com